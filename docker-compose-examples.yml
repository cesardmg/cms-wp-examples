services:
  service:
    image: nginx
    deploy:
        resources:
            limits:
              cpus: 0.50
              memory: 512M
            reservations:
              cpus: 0.25
              memory: 128M
#---------------------------------- CHATGPT
version: '3.7'

services:
  wordpress:
    image: wordpress:latest
    ports:
      - "80:80"
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
    volumes:
      - wordpress_data:/var/www/html
    networks:
      - backend

  db:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  wordpress_data:
  db_data:
#---------------------------------- GITHUB /OFFICIAL DOCKER 1
services:
  db:
    # We use a mariadb image which supports both amd64 & arm64 architecture
    image: mariadb:10.6.4-focal
    # If you really want to use MySQL, uncomment the following line
    #image: mysql:8.0.27
    command: '--default-authentication-plugin=mysql_native_password'
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=somewordpress
      - MYSQL_DATABASE=wordpress
      - MYSQL_USER=wordpress
      - MYSQL_PASSWORD=wordpress
    expose:
      - 3306
      - 33060
  wordpress:
    image: wordpress:latest
    ports:
      - 80:80
    restart: always
    environment:
      - WORDPRESS_DB_HOST=db
      - WORDPRESS_DB_USER=wordpress
      - WORDPRESS_DB_PASSWORD=wordpress
      - WORDPRESS_DB_NAME=wordpress
volumes:
  db_data:
#---------------------------------- GITHUB OFFICIAL DOCKER 2
services:
  db:
    # We use a mariadb image which supports both amd64 & arm64 architecture
    image: mariadb:10.6.4-focal
    # If you really want to use MySQL, uncomment the following line
    #image: mysql:8.0.27
    command: '--default-authentication-plugin=mysql_native_password'
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=somewordpress
      - MYSQL_DATABASE=wordpress
      - MYSQL_USER=wordpress
      - MYSQL_PASSWORD=wordpress
    expose:
      - 3306
      - 33060
  wordpress:
    image: wordpress:latest
    volumes:
      - wp_data:/var/www/html
    ports:
      - 80:80
    restart: always
    environment:
      - WORDPRESS_DB_HOST=db
      - WORDPRESS_DB_USER=wordpress
      - WORDPRESS_DB_PASSWORD=wordpress
      - WORDPRESS_DB_NAME=wordpress
volumes:
  db_data:
  wp_data:
#---------------------------------- DIGITAL OCEAN

version: '3'

services:
  db:
    image: mysql:8.0
    container_name: db
    restart: unless-stopped
    env_file: .env
    environment:
      - MYSQL_DATABASE=wordpress
    volumes: 
      - dbdata:/var/lib/mysql
    command: '--default-authentication-plugin=mysql_native_password'
    networks:
      - app-network

  wordpress:
    depends_on: 
      - db
    image: wordpress:5.1.1-fpm-alpine
    container_name: wordpress
    restart: unless-stopped
    env_file: .env
    environment:
      - WORDPRESS_DB_HOST=db:3306
      - WORDPRESS_DB_USER=$MYSQL_USER
      - WORDPRESS_DB_PASSWORD=$MYSQL_PASSWORD
      - WORDPRESS_DB_NAME=wordpress
    volumes:
      - wordpress:/var/www/html
    networks:
      - app-network

  webserver:
    depends_on:
      - wordpress
    image: nginx:1.15.12-alpine
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - wordpress:/var/www/html
      - ./nginx-conf:/etc/nginx/conf.d
      - certbot-etc:/etc/letsencrypt
    networks:
      - app-network

  certbot:
    depends_on:
      - webserver
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - wordpress:/var/www/html
    command: certonly --webroot --webroot-path=/var/www/html --email sammy@your_domain --agree-tos --no-eff-email --staging -d your_domain -d www.your_domain

volumes:
  certbot-etc:
  wordpress:
  dbdata:

networks:
  app-network:
    driver: bridge
#---------------------------------- LINODE
version: '3.3'

services:
   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     volumes:
       - wordpress_files:/var/www/html
     ports:
       - "80:80"
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: my_wordpress_db_password
       WORDPRESS_DB_NAME: wordpress

   db:
     image: mysql:5.7
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: my_db_root_password
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: my_wordpress_db_password
volumes:
    wordpress_files:
    db_data:
#---------------------------------- WP ENGINE
version: '3.3'

services:
   db:
     image: mysql:5.7
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress
   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "8000:80"
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
       WORDPRESS_DB_NAME: wordpress
volumes:
    db_data: {}


#---------------------------------- BASIC STRUCTURE
version: '3.8'        # Use a version compatible with your Docker setup

services:             # Define the services needed for WordPress
  wordpress:          # This will be the WordPress container
    image: wordpress:latest  # Use the official WordPress image
    ports:
      - "8000:80"     # Map port 8000 on the host to port 80 in the container
    volumes:
      - ./html:/var/www/html  # Persist WordPress files
    environment:      # Environment variables for WordPress
      WORDPRESS_DB_HOST: db:3306        # Set the database host
      WORDPRESS_DB_USER: wordpressuser   # Database username
      WORDPRESS_DB_PASSWORD: wordpresspass  # Database password
      WORDPRESS_DB_NAME: wordpressdb    # Database name
    depends_on:
      - db            # Make sure the database service is started first

  db:                # This will be the database container for WordPress
    image: mysql:5.7  # Use the official MySQL image
    volumes:
      - db_data:/var/lib/mysql  # Persist database files
    environment:    # Environment variables for MySQL
      MYSQL_ROOT_PASSWORD: rootpassword  # Root password
      MYSQL_DATABASE: wordpressdb        # Database name
      MYSQL_USER: wordpressuser          # Database username
      MYSQL_PASSWORD: wordpresspass      # Database user password

volumes:             # Define named volumes
  db_data:           # This will store the database data persistently

networks:            # Define networks (optional if the default network is used)
  wp-network:        # Custom network for the WordPress environment
    driver: bridge


- `image`: Use `wordpress:latest` to get the latest official WordPress image.
- `ports`: Expose WordPress on a specific port on the host.
- `volumes`: Mount the directory for WordPress files to persist data.
- `environment`: Set up WordPress-specific environment variables for database connections.

MySQL Database Service Options:

- `image`: Use a specific MySQL image that is compatible with WordPress.
- `volumes`: Create a volume for MySQL to persist the database.
- `environment`: Set up MySQL-specific environment variables for the root password, database name, and user credentials.

Commands for WordPress:

- `docker-compose up -d`: Start your WordPress and database containers in detached mode.
- `docker-compose down`: Stop and remove the WordPress and database containers.
- `docker-compose logs wordpress`: View logs for the WordPress container.
- `docker-compose ps`: List the running containers for the WordPress environment.

Best Practices:

- Use specific versions for images rather than `latest` to ensure stability.
- Set up a restart policy for services (e.g., `restart: always`) to handle automatic container restarts.
- Use environment variables or `.env` files for sensitive information instead of hardcoding them in the `docker-compose.yml`.
- Back up your `wordpress` and `db_data` volumes regularly.
- Use Docker Compose for local development and testing. For production, consider using a more robust container orchestration system if needed.

Remember to customize your `docker-compose.yml` file based on the needs of your WordPress site, such as configuring email settings, adding SSL, or integrating with other services.
